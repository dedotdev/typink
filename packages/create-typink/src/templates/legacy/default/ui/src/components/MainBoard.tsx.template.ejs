<% if (options.presetContract === 'greeter') { %>
import { Box, Button, Flex, FormControl, FormHelperText, FormLabel, Heading, Input, Text } from '@chakra-ui/react';
import { useCallback, useState } from 'react';
import { toast } from 'react-toastify';
import PendingText from '@/components/shared/PendingText.tsx';
import { useApp } from '@/providers/AppProvider.tsx';
import { shortenAddress } from '@/utils/string.ts';
import { txToaster } from '@/utils/txToaster.tsx';
import { useContractQuery, useContractTx, useWatchContractEvent } from 'typink';

export default function GreetBoard() {
  const { greeterContract: contract } = useApp();
  const [message, setMessage] = useState('');
  const setMessageTx = useContractTx(contract, 'setMessage');

  const { data: greet, isLoading } = useContractQuery({
    contract,
    fn: 'greet',
    watch: true,
  });

  const handleUpdateGreeting = async (e: any) => {
    e?.preventDefault();

    if (!contract || !message) return;

    const toaster = txToaster();

    try {
      await setMessageTx.signAndSend({
        args: [message],
        callback: (result) => {
          const { status } = result;
          console.log(status);

          if (status.type === 'BestChainBlockIncluded') {
            setMessage('');
          }

          toaster.onTxProgress(result);
        },
      });
    } catch (e: any) {
      toaster.onTxError(e);
    }
  };

  // Listen to Greeted event from system events
  // & update the greeting message in real-time
  //
  // To verify this, try open 2 tabs of the app
  // & update the greeting message in one tab,
  // you will see the greeting message updated in the other tab
  useWatchContractEvent(
    contract,
    'Greeted',
    useCallback((events) => {
      events.forEach((greetedEvent) => {
        const {
          name,
          data: { from, message },
        } = greetedEvent;

        console.log(`Found a ${name} event sent from: ${from?.address()}, message: ${message}  `);

        toast.info(
          <div>
            <p>
              Found a <b>{name}</b> event
            </p>
            <p style={{ fontSize: 12 }}>
              Sent from: <b>{shortenAddress(from?.address())}</b>
            </p>
            <p style={{ fontSize: 12 }}>
              Greeting message: <b>{message}</b>
            </p>
          </div>,
        );
      });
    }, []),
  );

  return (
    <Box>
      <Heading size='md' mb={2}>
        Sample Greeter Contract
      </Heading>
      <Text>Send a greeting message to the world!</Text>
      <Flex my={4} gap={2}>
        <Text>Message:</Text>
        <PendingText fontWeight='600' isLoading={isLoading} color='primary.500'>
          {greet}
        </PendingText>
      </Flex>
      <form onSubmit={handleUpdateGreeting}>
        <FormControl>
          <FormLabel>Update message:</FormLabel>
          <Input
            type='input'
            maxLength={50}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            isDisabled={setMessageTx.inBestBlockProgress}
          />
          <FormHelperText>Max 50 characters</FormHelperText>
        </FormControl>
        <Button type='submit' size='sm' mt={4} isDisabled={!message} isLoading={setMessageTx.inBestBlockProgress}>
          Update Greeting
        </Button>
      </form>
    </Box>
  );
}
<% } %>

<% if (options.presetContract === 'psp22') { %>
import { Box, Button, Divider, Heading } from '@chakra-ui/react';
import PendingText from '@/components/shared/PendingText.tsx';
import WalletSelection from '@/components/shared/WalletSelection.tsx';
import { useApp } from '@/providers/AppProvider.tsx';
import { txToaster } from '@/utils/txToaster.tsx';
import { formatBalance, useContractQuery, useContractTx, usePSP22Balance, useTypink } from 'typink';

export default function Psp22Board() {
  const { psp22Contract: contract } = useApp();
  const { connectedAccount } = useTypink();
  const mintTx = useContractTx(contract, 'psp22MintableMint');

  const { data: tokenName, isLoading: loadingTokenName } = useContractQuery({
    contract,
    fn: 'psp22MetadataTokenName',
  });

  const { data: tokenSymbol, isLoading: loadingTokenSymbol } = useContractQuery({
    contract,
    fn: 'psp22MetadataTokenSymbol',
  });

  const { data: tokenDecimal, isLoading: loadingTokenDecimal } = useContractQuery({
    contract,
    fn: 'psp22MetadataTokenDecimals',
  });

  const {
    data: totalSupply,
    isLoading: loadingTotalSupply,
    refresh: refreshTotalSupply,
  } = useContractQuery({
    contract,
    fn: 'psp22TotalSupply',
  });

  const { data: myBalance, isLoading: loadingBalance } = usePSP22Balance({
    contractAddress: contract?.address,
    address: connectedAccount?.address,
    watch: true,
  });

  const mintNewToken = async () => {
    if (!tokenDecimal) return;

    const toaster = txToaster();
    try {
      await mintTx.signAndSend({
        args: [BigInt(100 * Math.pow(10, tokenDecimal))],
        callback: (result) => {
          const { status } = result;
          console.log(status);

          if (status.type === 'BestChainBlockIncluded') {
            refreshTotalSupply();
          }

          toaster.onTxProgress(result);
        },
      });
    } catch (e: any) {
      console.error(e);
      toaster.onTxError(e);
    }
  };

  return (
    <Box>
      <Heading size='md'>PSP22 Contract</Heading>
      <Box mt={4}>
        <Box mb={2}>
          Token Name:{' '}
          <PendingText fontWeight='600' isLoading={loadingTokenName}>
            {tokenName}
          </PendingText>
        </Box>
        <Box mb={2}>
          Token Symbol:{' '}
          <PendingText fontWeight='600' isLoading={loadingTokenSymbol}>
            {tokenSymbol}
          </PendingText>
        </Box>
        <Box mb={2}>
          Token Decimal:{' '}
          <PendingText fontWeight='600' isLoading={loadingTokenDecimal}>
            {tokenDecimal}
          </PendingText>
        </Box>
        <Box mb={2}>
          Total Supply:{' '}
          <PendingText fontWeight='600' isLoading={loadingTotalSupply}>
            {formatBalance(totalSupply, { decimals: tokenDecimal, symbol: tokenSymbol })}
          </PendingText>
        </Box>
        <Divider my={4} />
        <Box>
          My Balance:{' '}
          {connectedAccount ? (
            <PendingText fontWeight='600' isLoading={loadingBalance}>
              {formatBalance(myBalance, { decimals: tokenDecimal, symbol: tokenSymbol })}
            </PendingText>
          ) : (
            <WalletSelection buttonProps={{ size: 'xs' }} />
          )}
        </Box>
        {connectedAccount && (
          <Box mt={4}>
            <Button size='sm' onClick={mintNewToken} isLoading={mintTx.inBestBlockProgress}>
              Mint 100 {tokenSymbol}
            </Button>
          </Box>
        )}
      </Box>
    </Box>
  );
}
<% } %>
